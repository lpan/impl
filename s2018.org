* Coding
** DONE Sorting
*** insertion sort
    - [X] implementation
    - [X] running time analysis
      - time: O(n^2)
        - iterating array is Theta(n)
        - find right place to insert: O(n)
      - space: O(1)
        - no need to alloc
*** merge sort
    - [X] implementation
    - [X] running time analysis
      - time: O(nlogn)
        - recursion depth is logn
        - merge is O(n)
      - space: O(n)
        - merge needs to allocate extra space
*** quick sort
    - [X] implementation
    - [X] running time analysis
      - running time depends on the recursion depth
        - best case: O(nlogn) (good pivot)
        - worst case: O(n^2) (pivot always max or min)
      - space TODO
** TODO Backtracking
   - [ ] find all combinations/permutations of a string
** TODO Trees
*** construction
    - Done in heap.go
*** traversal
**** DONE inorder
**** DONE postorder
**** DONE preorder
** TODO Graphs
*** construction
**** objects and pointers
**** matrix
**** adjacency list
*** traversal
**** depth-first search
**** breadth-first search
*** problems
    - path finding (log path from vertex A to vertex B)
** TODO Dynamic Programming
